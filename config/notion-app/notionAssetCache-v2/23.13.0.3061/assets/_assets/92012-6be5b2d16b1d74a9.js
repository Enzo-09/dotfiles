"use strict";(globalThis.webpackChunknotion_next=globalThis.webpackChunknotion_next||[]).push([[92012],{205605:(t,e,n)=>{n.d(e,{PP:()=>c,VX:()=>u,wB:()=>_,dZ:()=>m,$e:()=>y});n(16280),n(944114),n(898992),n(354520),n(672577),n(581454);var o=()=>n(919709),r=()=>n(42245),i=()=>n(725649),a=()=>n(185864),s=(n(517642),n(658004),n(733853),n(845876),n(432475),n(515024),n(731698),n(430670),()=>n(638681));s().union([s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0}),s().object({required:{operator:s().literals("string_contains","string_does_not_contain","string_ends_with","string_is","string_is_not","string_starts_with"),value:s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})},optional:{},exact:!0})]),s().union([s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0}),s().object({required:{operator:s().literals("number_does_not_equal","number_equals","number_greater_than","number_greater_than_or_equal_to","number_less_than","number_less_than_or_equal_to"),value:s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().number()])},optional:{},exact:!0})},optional:{},exact:!0})]),s().union([s().object({required:{operator:s().literals("date_is","date_is_after","date_is_before","date_is_on_or_after","date_is_on_or_before"),value:s().lazy((()=>l))},optional:{use_end:s().boolean()},exact:!0}),s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0})]);const l=s().union([s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0}),s().object({required:{type:s().literal("relative"),value:s().literals("one_month_ago","one_month_from_now","one_week_ago","one_week_from_now","today","tomorrow","yesterday")},optional:{},exact:!0})]);s().union([s().object({required:{operator:s().literals("enum_is","enum_is_not"),value:s().union([s().array(s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})),s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})])},optional:{},exact:!0}),s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0})]),s().union([s().object({required:{operator:s().literals("enum_contains","enum_does_not_contain"),value:s().union([s().array(s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})),s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})])},optional:{},exact:!0}),s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0})]),s().object({required:{operator:s().literals("checkbox_is","checkbox_is_not"),value:s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().literal(!1),s().literal(!0)])},optional:{},exact:!0})},optional:{},exact:!0}),s().union([s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0}),s().object({required:{operator:s().literals("relation_contains","relation_does_not_contain"),value:s().union([s().array(s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})),s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})])},optional:{},exact:!0})]),s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0}),s().union([s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0}),s().object({required:{operator:s().literals("status_is","status_is_not"),value:s().union([s().array(s().object({required:{type:s().literals("is_group","is_option"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})),s().object({required:{type:s().literals("is_group","is_option"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0})])},optional:{},exact:!0})]),s().union([s().object({required:{operator:s().literals("is_empty","is_not_empty")},optional:{},exact:!0}),s().object({required:{operator:s().literals("person_contains","person_does_not_contain"),value:s().union([s().array(s().union([s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0}),s().object({required:{type:s().literal("relative"),value:s().literal("me")},optional:{},exact:!0})])),s().object({required:{type:s().literal("exact"),value:s().union([s().isUndefined(),s().string()])},optional:{},exact:!0}),s().object({required:{type:s().literal("relative"),value:s().literal("me")},optional:{},exact:!0})])},optional:{},exact:!0})]),'\nIn addition to action: "update", key, name, and type, you must provide additional properties in order to match one of the following UpdateView types:\n\n// Defines how to filter items in a view. Can be nested.\nFilter = {\n\toperator: "and" | "or",\n\tfilters: Array<PropertyFilter | Filter>\n}\n\n// Defines how to filter by a specific property.\nPropertyFilter = {\n\tproperty: string,\n\tfilter: TextFilter | NumberFilter | DateFilter | SelectFilter | MultiSelectFilter | CheckboxFilter | RelationFilter | FileFilter | StatusFilter | PersonFilter\n}\n\n// Defines how to filter text properties.\nTextFilter = {\n\toperator: "string_is" | "string_is_not" | "string_contains" | "string_does_not_contain" | "string_starts_with" | "string_ends_with",\n\tvalue: { type: "exact", value: string | undefined }\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter number properties.\nNumberFilter = {\n\toperator: "number_equals" | "number_does_not_equal" | "number_greater_than" | "number_less_than" | "number_greater_than_or_equal_to" | "number_less_than_or_equal_to",\n\tvalue: { type: "exact", value: number | undefined }\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter date properties.\nDateFilter = {\n\toperator: "date_is" | "date_is_before" | "date_is_after" | "date_is_on_or_before" | "date_is_on_or_after",\n\tvalue:\n\t\t| { type: "exact", value: string | undefined } // ISO 8601 date string\n\t\t| { type: "relative", value: "today" | "tomorrow" | "yesterday" | "one_week_ago" | "one_week_from_now" | "one_month_ago" | "one_month_from_now" },\n\tuse_end?: boolean\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter select properties.\nSelectFilter = {\n\toperator: "enum_is" | "enum_is_not",\n\tvalue: { type: "exact", value: string | undefined } | Array<{ type: "exact", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter multi-select properties.\nMultiSelectFilter = {\n\toperator: "enum_contains" | "enum_does_not_contain",\n\tvalue: { type: "exact", value: string | undefined } | Array<{ type: "exact", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter checkbox properties.\nCheckboxFilter = {\n\toperator: "checkbox_is" | "checkbox_is_not",\n\tvalue: { type: "exact", value: boolean | undefined }\n}\n\n// Defines how to filter relation properties.\nRelationFilter = {\n\toperator: "relation_contains" | "relation_does_not_contain",\n\tvalue: { type: "exact", value: string | undefined } | Array<{ type: "exact", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter file properties.\nFileFilter = {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter status properties.\nStatusFilter = {\n\toperator: "status_is" | "status_is_not",\n\tvalue: { type: "is_group" | "is_option", value: string | undefined } | Array<{ type: "is_group" | "is_option", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter person properties.\nPersonFilter = {\n\toperator: "person_contains" | "person_does_not_contain",\n\tvalue: { type: "exact", value: string | undefined } | { type: "relative", value: "me" } | Array<{ type: "exact", value: string | undefined } | { type: "relative", value: "me" }> // String values are Notion user IDs\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to sort items in a view.\nSort = {\n\t// Must be a valid property from the database schema that is not content.\n\tproperty: string,\n\tdirection: "ascending" | "descending"\n}\n\n// Defines how to group items in a view.\nGroupBy = {\n\tproperty: string,\n\thideEmptyGroups?: boolean\n} & (\n\t{\n\t\ttype: "title" | "text" | "url" | "email" | "phone_number",\n\t\tgroupBy: "exact" | "alphabet_prefix",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "number",\n\t\tgroupBy?: { type: "unique", start?: number, end?: number },\n\t\tstart: number,\n\t\tend: number,\n\t\tsize: number,\n\t\tsort: "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "date" | "created_time" | "last_edited_time",\n\t\tgroupBy: "relative" | "day" | "week" | "month" | "year",\n\t\tsort: "ascending" | "descending",\n\t\tstartDayOfWeek?: 0 | 1\n\t} |\n\t{\n\t\ttype: "select" | "multi_select",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "status",\n\t\tgroupBy: "group" | "option",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "person",\n\t\tsort: "manual"\n\t} |\n\t{\n\t\ttype: "relation",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "checkbox",\n\t\tsort: "manual"\n\t}\n)\n\n// Each updated view must match one of the following types:\nUpdateView = {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "table",\n\tdatabaseKey: string,\n\t// Properties from the database schema that should be shown as columns, excluding content type. Must include the title property.\n\tcolumns: Array<string>,\n\t// Optional property to group rows by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "board",\n\tdatabaseKey: string,\n\t// Required property to group cards by, must be a valid property from schema that is not content.\n\tgroupBy: GroupBy,\n\t// Optional properties to show on cards, excluding content and title.\n\tcardAdditionalProperties?: Array<string>,\n\t// Optional secondary grouping property, must be a valid property from schema that is not content.\n\tsubGroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "calendar",\n\tdatabaseKey: string,\n\t// Required date property to use for calendar view (must be date, created_time, or last_edited_time).\n\tcalendarBy: string,\n\t// Optional properties to show on cards, excluding content and title.\n\tcardAdditionalProperties?: Array<string>,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "list",\n\tdatabaseKey: string,\n\t// Optional properties to show for each item, excluding content and title.\n\trowAdditionalProperties?: Array<string>,\n\t// Optional property to group items by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "gallery",\n\tdatabaseKey: string,\n\t// Optional properties to show on cards, excluding content and title.\n\tcardAdditionalProperties?: Array<string>,\n\t// Optional property to group cards by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "timeline",\n\tdatabaseKey: string,\n\t// Required date property to use for timeline (must be date, created_time, or last_edited_time).\n\ttimelineBy: string,\n\t// Optional properties to show on cards, excluding content and title\n\trowAdditionalProperties?: Array<string>,\n\t// Optional property to group items by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "chat"\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "custom"\n}\n'.trim();function d(t){return"table"===t.type||"board"===t.type||"calendar"===t.type||"list"===t.type||"gallery"===t.type||"timeline"===t.type}var p=()=>n(94522);function c(t){var e;const{collectionStore:n}=t,i=(0,o().q4_)(n.getName())||"";return{type:"database",key:(0,r().PD)(i),name:i,version:a().Nh.database.latestVersion,state:{collection:null===(e=n.getModel())||void 0===e?void 0:e.__IM_SORRY__getValue(),propertyKeyToIdMap:(0,r().jL)(n.getSchema()),pointer:n.getSpaceShardedPointer(),accessScope:(0,r().fX)(n.getRole()??"none")}}}function u(t){var e;return(null===(e=t.modules)||void 0===e?void 0:e.filter((t=>"database"===t.type)))??[]}function _(t){return t.databaseViews??[]}function y(t){const{workflowStore:e,store:n}=t,o=(0,p().dh)(e),a=u(o),s=(n.getCollectionStores()||[]).map((t=>function(t){var e;const{databaseModule:n,collectionStore:o}=t;return n?{...n,state:{...n.state,collection:null===(e=o.getModel())||void 0===e?void 0:e.__IM_SORRY__getValue(),propertyKeyToIdMap:(0,r().jL)(o.getSchema()),schema:void 0,blockSchema:void 0}}:c({collectionStore:o})}({databaseModule:a.find((e=>{var n;return(null===(n=(0,i().DK)(e.state))||void 0===n||null===(n=n.pointer)||void 0===n?void 0:n.id)===(null==t?void 0:t.id)})),collectionStore:t}))),l=[...(o.modules||[]).filter((t=>"database"!==t.type)),...s],d=m({store:n,databaseModules:s,databaseViews:_(o)});return{...o,modules:l,databaseViews:d}}function m(t){const{store:e,databaseModules:n,databaseViews:o}=t,a=[];for(const l of e.getCollectionViewStores()){var s;const t=null===(s=l.getModel())||void 0===s?void 0:s.__IM_SORRY__getValue();if(!t||"custom"===t.type||"chat"===t.type)continue;const e=l.getCollectionStore();if(!e)throw new Error(`Collection not found for view: ${l.id}`);if(e.pathIsDead())continue;const p=n.find((t=>{var n;return(null===(n=(0,i().DK)(t.state))||void 0===n||null===(n=n.pointer)||void 0===n?void 0:n.id)===e.id}));if(d(t)&&!p)throw new Error(`Database module not found: ${e.id}`);const c=o.find((t=>t.collectionView.id===l.id)),u=(null==c?void 0:c.key)??(0,r().PD)(t.name||t.type);a.push({key:u,databaseKey:d(t)?null==p?void 0:p.key:void 0,collectionView:t})}return a}},392012:(t,e,n)=>{n.d(e,{qm:()=>b,Z6:()=>h,Ug:()=>v,dd:()=>w});n(16280),n(944114),n(898992),n(354520),n(672577),n(581454);var o=()=>n(519831),r=()=>n(869558),i=()=>n(96689),a=()=>n(919709),s=()=>n(42245),l=()=>n(725649);const d={read_content:!0,read_comment:!0},p={...d,insert_comment:!0,insert_content:!0,update_content:!0};var c=()=>n(534177),u=()=>n(246826),_=()=>n(751156),y=()=>n(272600),m=()=>n(630116),f=()=>n(94522),g=()=>n(205605);function b(t){const{environment:e,store:n,workflowStore:r,transaction:i}=t,{inMemoryRecordCache:s}=r,d=r.getSpaceId();if(!d)throw new Error("Space ID not found");const p=(0,f().dh)(r),c=(p.modules||[]).filter((t=>"database"===t.type));for(const _ of c){const{key:t,name:c,state:m}=_;if((0,l().j6)(m))continue;const f=(0,l().DK)(m);if(!f||!f.collection)throw new Error("Database state not found");if(f.pointer)continue;const g={id:f.collection.id,table:o().Vl,spaceId:d},b={...f.collection,name:(0,a().x9d)(c),parent_id:n.id,space_id:d};u().eC({environment:e,table:o().Vl,value:{...b,schema:{}},transaction:i,inMemoryRecordCache:s}),(0,y().p)({collectionViewBlockStore:n,collectionPointer:g,transaction:i});const v=(p.modules||[]).findIndex((e=>e.key===t));if(-1===v)throw new Error("Module not found");u().zv({store:r.getDataStore().getKeyStore("modules").getKeyStore(v).getKeyStore("state"),data:{pointer:g,collection:b},transaction:i})}}function v(t){const{previousDatabaseModules:e,workflowStore:n,transaction:o}=t;if(!n.getSpaceId())throw new Error("Space ID not found");const r=((0,f().dh)(n).modules||[]).filter((t=>"database"===t.type));if(0===r.length)return;const i=new Map(null==e?void 0:e.map((t=>[t.key,t])));for(const d of r){const{key:t,state:e}=d;if((0,l().j6)(e))continue;const{pointer:p}=(0,l().DK)(e)??{};if(!p)throw new Error("Database state not found");const c=m().md.createChildStore(n,p),_=i.get(t),g=(0,l().DK)(null==d?void 0:d.state),b=n.getParentStore();!_&&null!=g&&g.pointer&&null!=b&&b.isCollectionView()&&(0,y().p)({collectionViewBlockStore:b,collectionPointer:g.pointer,transaction:o});const{mappedDiff:v,newBlockSchema:h,newDeletedBlockSchema:w,newPropertyKeyToIdMap:x}=(0,f().bX)({collectionStore:c,previousDatabaseModule:_,newDatabaseModule:d,databaseModules:r}),S=(0,s().lM)({newBlockSchema:h,newDatabaseModule:d,databaseModules:r});if(v.length>0){var a;u().zv({store:c,data:{schema:S,deleted_schema:{...c.getDeletedSchema(),...w}},transaction:o});const e=((0,f().dh)(n).modules||[]).findIndex((e=>e.key===t));if(-1===e)throw new Error("Module not found");u().zv({store:n.getDataStore().getKeyStore("modules").getKeyStore(e).getKeyStore("state"),data:{collection:null===(a=c.getModel())||void 0===a?void 0:a.__IM_SORRY__getValue(),propertyKeyToIdMap:x,internalRelations:{}},transaction:o})}}}function h(t){const{store:e,workflowStore:n,transaction:o,previousDatabaseViews:i}=t,a=(0,f().dh)(n),s=(0,g().VX)(a),d=(0,g().wB)(a),p=n.getSpaceId();if(!p)throw new Error("Space ID not found");const _=(0,f().Ds)({store:e,lastSavedStepDatabaseViews:i,newDatabaseViews:d}),y=[],b=[];for(const f of _)if("added"===f.diff||"changed"===f.diff){const t=f.value,i=s.find((e=>e.key===t.databaseKey)),a=(0,l().DK)(null==i?void 0:i.state),c={...t.collectionView,parent_id:e.id,space_id:p,format:{...t.collectionView.format,collection_pointer:null==a?void 0:a.pointer}},_={id:c.id,table:r().Gy,spaceId:p},y=m().pS.createChildStore(e,_);u().zv({store:y,data:c,transaction:o});const g=d.findIndex((t=>t.collectionView.id===c.id));if(-1===g)throw new Error("View not found");u().zv({store:n.getDataStore().getKeyStore("databaseViews").getKeyStore(g),data:{collectionView:c},transaction:o}),b.push(c.id)}else"removed"===f.diff?y.push(f.value.collectionView.id):(0,c().HB)(f.diff);const v=e.getCollectionViewIds(),h=[...v.filter((t=>!y.includes(t))),...b.filter((t=>!v.includes(t)))];u().zv({store:e,data:{view_ids:h},transaction:o})}function w(t){var e;const{workflowStore:n,collectionStore:o,newAccess:r,transaction:a}=t,s=null===(e=n.getData())||void 0===e?void 0:e.runtime_actor_pointer;if(!s)return;let u;switch(r){case"none":u="none";break;case"read":u=d;break;case"write":u=p;break;default:(0,c().HB)(r)}const y={type:"bot_permission",bot_id:s.id,role:u,parent_id:n.getSpaceId(),parent_table:i().NX};if(_().applyOperation({store:o,transaction:a,operation:{command:"setPermissionItem",pointer:o.pointer,path:["permissions"],args:y}}),n.canAdmin()){var m;const t=((null===(m=n.getData())||void 0===m?void 0:m.modules)??[]).findIndex((t=>{var e;return"database"===t.type&&(null===(e=(0,l().DK)(t.state))||void 0===e||null===(e=e.pointer)||void 0===e?void 0:e.id)===o.id}));if(-1===t)return;_().applyOperation({store:n,operation:{command:"set",path:["data","modules",t,"state","accessScope"],args:"none"===r?"read":r,pointer:n.pointer},transaction:a})}}}}]);